package net.evilblock.cosmetics.category.armorimport net.evilblock.cosmetics.Cosmeticimport net.evilblock.cosmetics.CosmeticCategoryimport net.evilblock.cosmetics.category.ArmorCosmeticCategoryimport org.bukkit.ChatColorimport org.bukkit.Colorimport org.bukkit.Materialimport org.bukkit.entity.Playerimport org.bukkit.inventory.ItemStackimport org.bukkit.inventory.meta.LeatherArmorMeta/** * Equips the player with colored armour based on their rank. */class RankArmorCosmetic(        private val id: String,        private val rankName: String,        private val permission: String,        private val hidden: Boolean,        var color: Color,        private var helmetColor: Color = color,        private var chestplateColor: Color = color,        private var leggingsColor: Color = color,        private var bootsColor: Color = color) : Cosmetic() {    override fun getCategory(): CosmeticCategory {        return ArmorCosmeticCategory    }    override fun getID(): String {        return "rank-armor-$id"    }    override fun getName(): String {        return "$rankName Rank Armour"    }    override fun getDescription(): String {        return "Get a set of armour matching your rank's color."    }    override fun getIcon(): ItemStack {        val itemStack = ItemStack(Material.LEATHER_HELMET)        val itemMeta = itemStack.itemMeta as LeatherArmorMeta        itemMeta.color = color        itemStack.itemMeta = itemMeta        return itemStack    }    override fun getPermission(): String {        return permission    }    override fun hiddenIfNotPermitted(): Boolean {        return hidden    }    override fun canEnable(player: Player): Boolean {        if (player.inventory.helmet != null                || player.inventory.chestplate != null                || player.inventory.leggings != null                || player.inventory.boots != null) {            player.sendMessage("${ChatColor.RED}You must unequip all of your armor to enable this cosmetic!")        }        return true    }    override fun onEnable(player: Player) {        val armour = arrayOf(                ItemStack(Material.LEATHER_HELMET),                ItemStack(Material.LEATHER_CHESTPLATE),                ItemStack(Material.LEATHER_LEGGINGS),                ItemStack(Material.LEATHER_BOOTS)        )        for (armourPiece in armour) {            val meta = armourPiece.itemMeta as LeatherArmorMeta            meta.color = when (armourPiece.type) {                Material.LEATHER_HELMET -> helmetColor                Material.LEATHER_CHESTPLATE -> chestplateColor                Material.LEATHER_LEGGINGS -> leggingsColor                Material.LEATHER_BOOTS -> bootsColor                else -> color            }            armourPiece.itemMeta = meta        }        player.inventory.helmet = armour[0]        player.inventory.chestplate = armour[1]        player.inventory.leggings = armour[2]        player.inventory.boots = armour[3]        player.updateInventory()        player.closeInventory()    }    override fun onDisable(player: Player) {        player.inventory.armorContents = arrayOfNulls(4)        player.updateInventory()        player.closeInventory()    }}